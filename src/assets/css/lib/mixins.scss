@use "sass:map";
@use "sass:math";
@import "variables";

/// Uses rules with the width of the screen less than the given breakpoint
///
/// @param {string | $width} $breakpoint
@mixin media-down($breakpoint) {
  @if map.has-key($widths, $breakpoint) == false {
    @error "Media breakpoint is not defined in $widths";
  }

  @media screen and (max-width: map.get($widths, $breakpoint)) {
    @content;
  }
}

/// Uses rules with the width of the screen greater than the given breakpoint
///
/// @param {string | $width} $breakpoint
@mixin media-up($breakpoint) {
  @if map.has-key($widths, $breakpoint) == false {
    @error "Media breakpoint is not defined in $widths";
  }

  @media screen and (min-width: map.get($widths, $breakpoint)) {
    @content;
  }
}

/// Uses rules with the width of the screen between the given breakpoints
///
/// @param {string | $width} $breakpoint1
@mixin media-between($breakpoint1, $breakpoint2) {
  @if map.has-key($widths, $breakpoint1) == false or map.has-key($widths, $breakpoint2) == false {
    @error "Media breakpoint is not defined in $widths";
  }

  @media screen and (min-width: map.get($widths, $breakpoint1)) and (max-width: map.get($widths, $breakpoint2)) {
    @content;
  }
}

/*
  Gets the spacing value based on base spacing and the given multiplier.

  @param {number} $multiplier - The multiplier.

  @return {number} - The spacing value.
*/
@function spacing($multiplier) {
  @return $base-spacing-unit * $multiplier;
}

/*
  Gets the color by its name and shade.

  @param {string} $color_key - The name of the color.
  @param {string} $shade - The shade of the color.
  $param {boolean} $contrast - Whether to return the contrast color.

  @return {string} - The color.
*/
@function palette($color_key, $shade: main, $contrast: false) {
  @if map.has-key($colors, $color_key) == false {
    @error "Color is not defined in $colors";
  }

  $color: map.get($colors, $color_key);

  @if $shade != contrast and map.has-key($color, $shade) == false {
    @error "Shade is not defined in $shades";
  }

  $color: if($contrast == true, map.get(map.get($color, contrast), $shade), map.get($color, $shade));

  @return $color;
}

@mixin font($font-key: base) {
  @if map.has-key($typography, $font-key) == false {
    @error "Font is not defined in $typography";
  }

  $font: map.get($typography, $font-key);

  font-family: map.get($font, font-family);
  font-size: map.get($font, font-size);
  line-height: map.get($font, line-height);
}

@mixin aspect-ratio($ratio, $options: ()) {
  padding-bottom:
    if(
      map.has-key($options, max-padding),
      #{"min("} + percentage($ratio) + #{","} + map.get($options, max-padding) + #{")"},
      percentage($ratio)
    );
  position: relative;
  overflow: hidden;

  & > img,
  & > iframe,
  & > video {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
  }
}

/// Computes a top-shadow for a card effect.
/// @param {Number} $depth - depth level
/// @return {List}
@function top-shadow($depth, $color) {
  $primary-offset: nth(1.5 3 10 14 19, $depth) * 1px;
  $blur: nth(1.5 3 10 14 19, $depth) * 4px;
  $color: #{rgba($color, nth(0.12 0.16 0.19 0.25 0.3, $depth))};

  @return 0 $primary-offset $blur $color;
}

/// Computes a bottom-shadow for a card effect.
/// @param {Number} $depth - depth level
/// @return {List}
@function bottom-shadow($depth, $color) {
  $primary-offset: nth(1.5 3 6 10 15, $depth) * 1px;
  $blur: nth(1 3 3 5 6, $depth) * 4px;
  $color: #{rgba($color, nth(0.24 0.23 0.23 0.22 0.22, $depth))};

  @return 0 $primary-offset $blur $color;
}

/// Gives a card depth effect.
/// @param {Number} $depth - depth level (between 1 and 5)
/// @requires {function} top-shadow
/// @requires {function} bottom-shadow
@mixin shadow($depth, $color: palette(grey, 800)) {
  @if $depth < 1 {
    box-shadow: none;
  } @else if $depth > 5 {
    @warn "Invalid $depth `#{$depth}` for mixin `card`.";
  } @else {
    box-shadow: bottom-shadow($depth, $color), top-shadow($depth, $color);
  }
}
